name: 🤖 Claude AI 日次ブログ自動生成

on:
  schedule:
    # 毎日午前9時（JST）に実行 (UTC 00:00)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      keyword:
        description: '手動実行時のキーワード'
        required: false
        type: string
      test_mode:
        description: 'テストモード（実際の投稿をスキップ）'
        required: false
        type: boolean
        default: false

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate-blog-post:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 リポジトリチェックアウト
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📅 日付と曜日を取得
      id: date-info
      run: |
        # 日本時間で計算
        TZ='Asia/Tokyo' date '+%Y-%m-%d' > current_date.txt
        TZ='Asia/Tokyo' date '+%A' | tr '[:upper:]' '[:lower:]' > current_day.txt
        TZ='Asia/Tokyo' date '+%B' | tr '[:upper:]' '[:lower:]' > current_month.txt
        TZ='Asia/Tokyo' date '+%Y' > current_year.txt
        
        echo "date=$(cat current_date.txt)" >> $GITHUB_OUTPUT
        echo "day=$(cat current_day.txt)" >> $GITHUB_OUTPUT
        echo "month=$(cat current_month.txt)" >> $GITHUB_OUTPUT
        echo "year=$(cat current_year.txt)" >> $GITHUB_OUTPUT
    
    - name: 📋 Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: 🔧 Ruby セットアップ (Jekyll用)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: 📦 依存関係インストール
      run: |
        # Node.js依存関係
        cd scripts/blog-automation
        npm init -y
        npm install axios sharp js-yaml dotenv
        cd ../..
        
        # Jekyll依存関係
        bundle install
    
    - name: 🎯 キーワード選択
      id: keyword-selection
      run: |
        node -e "
        const fs = require('fs');
        const yaml = require('js-yaml');
        const path = require('path');
        
        // 手動キーワードチェック
        const manualKeyword = '${{ inputs.keyword }}';
        if (manualKeyword) {
          console.log('Manual keyword provided:', manualKeyword);
          console.log('::set-output name=keyword::' + manualKeyword);
          process.exit(0);
        }
        
        // コンテンツカレンダーから自動選択
        const calendarPath = path.join(__dirname, '_data/blog/content-calendar.yml');
        const calendar = yaml.load(fs.readFileSync(calendarPath, 'utf8'));
        
        const day = '${{ steps.date-info.outputs.day }}';
        const month = '${{ steps.date-info.outputs.month }}';
        
        // 曜日別テーマから選択
        const dayTheme = calendar.weekly_themes[day];
        if (!dayTheme) {
          console.error('No theme found for day:', day);
          process.exit(1);
        }
        
        // 使用履歴をチェック
        const historyPath = path.join(__dirname, 'logs/keyword-history.json');
        let history = [];
        if (fs.existsSync(historyPath)) {
          history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
        }
        
        // 30日以内に使用されていないキーワードを選択
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        const availableKeywords = dayTheme.keywords.filter(keyword => {
          const lastUsed = history.find(h => h.keyword === keyword);
          if (!lastUsed) return true;
          return new Date(lastUsed.date) < thirtyDaysAgo;
        });
        
        // 月別特集キーワードも候補に追加
        const monthTheme = calendar.monthly_campaigns[month];
        if (monthTheme && monthTheme.special_keywords) {
          availableKeywords.push(...monthTheme.special_keywords);
        }
        
        // ランダムに選択
        const selectedKeyword = availableKeywords[Math.floor(Math.random() * availableKeywords.length)];
        
        console.log('Selected keyword:', selectedKeyword);
        console.log('Theme:', dayTheme.theme);
        console.log('Structure:', dayTheme.structure);
        console.log('Instinct:', dayTheme.instinct);
        
        // 出力を設定
        console.log('::set-output name=keyword::' + selectedKeyword);
        console.log('::set-output name=theme::' + dayTheme.theme);
        console.log('::set-output name=structure::' + dayTheme.structure);
        console.log('::set-output name=instinct::' + dayTheme.instinct);
        "
    
    - name: 🚀 Claude APIでブログ生成
      id: generate-blog
      run: |
        cd scripts/blog-automation
        
        # 環境変数設定
        export BLOG_KEYWORD="${{ steps.keyword-selection.outputs.keyword }}"
        export BLOG_STRUCTURE="${{ steps.keyword-selection.outputs.structure }}"
        export BLOG_INSTINCT="${{ steps.keyword-selection.outputs.instinct }}"
        
        # APIキーの存在確認
        if [ -z "${{ env.ANTHROPIC_API_KEY }}" ]; then
          echo "⚠️ ANTHROPIC_API_KEY が設定されていません。モックジェネレーターを使用します。"
          node mock-blog-generator.js "$BLOG_KEYWORD"
        else
          # ブログ生成実行
          node claude-blog-generator.js "$BLOG_KEYWORD"
        fi
        
        # 生成結果確認
        TODAY="${{ steps.date-info.outputs.date }}"
        NEW_POST=$(find ../../_posts -name "${TODAY}-*.md" -type f | head -1)
        
        if [ -n "$NEW_POST" ]; then
          echo "Generated post: $NEW_POST"
          POST_TITLE=$(grep '^title:' "$NEW_POST" | sed 's/title: *"*\([^"]*\)"*/\1/')
          echo "::set-output name=success::true"
          echo "::set-output name=filename::$(basename $NEW_POST)"
          echo "::set-output name=title::$POST_TITLE"
        else
          echo "::set-output name=success::false"
          exit 1
        fi
    
    - name: 🔨 Jekyll ビルド
      if: steps.generate-blog.outputs.success == 'true'
      run: |
        bundle exec jekyll build
    
    - name: 📊 統計更新
      if: steps.generate-blog.outputs.success == 'true'
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // キーワード履歴更新
        const historyPath = path.join(__dirname, 'logs/keyword-history.json');
        let history = [];
        if (fs.existsSync(historyPath)) {
          history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
        }
        
        history.push({
          keyword: '${{ steps.keyword-selection.outputs.keyword }}',
          date: '${{ steps.date-info.outputs.date }}',
          title: '${{ steps.generate-blog.outputs.title }}',
          filename: '${{ steps.generate-blog.outputs.filename }}'
        });
        
        // 最新100件のみ保持
        if (history.length > 100) {
          history = history.slice(-100);
        }
        
        fs.mkdirSync(path.dirname(historyPath), { recursive: true });
        fs.writeFileSync(historyPath, JSON.stringify(history, null, 2));
        
        console.log('History updated with', history.length, 'entries');
        "
    
    - name: 📤 変更をコミット・プッシュ
      if: steps.generate-blog.outputs.success == 'true' && inputs.test_mode != true
      run: |
        git config --local user.email "claude-blog-bot@leadfive.com"
        git config --local user.name "Claude Blog Bot"
        
        # 生成されたファイルを追加
        git add _posts/
        git add assets/images/blog/
        git add _site/
        git add logs/
        
        # コミットメッセージ
        COMMIT_MSG="🤖 [Claude AI] 自動ブログ投稿: ${{ steps.generate-blog.outputs.title }}"
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"
        
        # プッシュ
        git push origin main
    
    - name: 📱 Slack通知（成功）
      if: steps.generate-blog.outputs.success == 'true' && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "✅ ブログ自動生成完了",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*✅ Claude AIによるブログ記事生成完了*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*📝 タイトル*\n${{ steps.generate-blog.outputs.title }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*🎯 キーワード*\n${{ steps.keyword-selection.outputs.keyword }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*📁 ファイル名*\n${{ steps.generate-blog.outputs.filename }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*🎨 テーマ*\n${{ steps.keyword-selection.outputs.theme }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🌐 記事は数分後にサイトに反映されます"
                }
              }
            ]
          }'
    
    - name: 🚨 エラー通知
      if: failure()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "❌ ブログ生成エラー",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*❌ Claude AIブログ生成でエラーが発生しました*\n\nGitHub Actionsログを確認してください。"
                  }
                }
              ]
            }'
        fi

  # 週次レポート生成
  weekly-report:
    runs-on: ubuntu-latest
    if: github.event.schedule && format('{0}', steps.date-info.outputs.day) == 'sunday'
    needs: generate-blog-post
    
    steps:
    - name: 📊 週次レポート生成
      run: |
        echo "Weekly report generation would go here"
        # 週次の統計情報をまとめて通知する処理